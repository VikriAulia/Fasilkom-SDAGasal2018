import java.io.IOException;
import java.util.Scanner;

//Java program for deletion in AVL Tree  
class Node {

	String key;
	int height;
	Node left, right, parent;

	Node(String d) {
		key = d;
		height = 1;
	}

}


	/**
	 * @author vikri.aulia
	 * @author 1706124182
	 */
	public class SDA1819T3 {

		Node root;
		private static Scanner sc;

		// A utility function to get height of the tree
		int height(Node N) {
			if (N == null) {
				return 0;
			}
			return N.height;
		}

		// A utility function to get maximum of two integers
		int max(int a, int b) {
			return (a > b) ? a : b;
		}

		// A utility function to right rotate subtree rooted with y
		// See the diagram given above.
		Node rightRotate(Node y) {
			Node x = y.left;
			Node T2 = x.right;

			// Perform rotation
			x.right = y;
			y.left = T2;

			// Update heights
			y.height = max(height(y.left), height(y.right)) + 1;
			x.height = max(height(x.left), height(x.right)) + 1;

			// Return new root
			return x;
		}

		// A utility function to left rotate subtree rooted with x
		// See the diagram given above.
		Node leftRotate(Node x) {
			Node y = x.right;
			Node T2 = y.left;

			// Perform rotation
			y.left = x;
			x.right = T2;

			// Update heights
			x.height = max(height(x.left), height(x.right)) + 1;
			y.height = max(height(y.left), height(y.right)) + 1;

			// Return new root
			return y;
		}

		// Get Balance factor of node N
		int getBalance(Node N) {
			if (N == null) {
				return 0;
			}
			return height(N.left) - height(N.right);
		}

		Node insert(Node node, String key) {
			/* 1. Perform the normal BST rotation */
			if (node == null) {
				return (new Node(key));
			}

			if (key.compareTo(node.key) > 0) {
				node.right = insert(node.right, key);
			} else if (key.compareTo(node.key) < 0) {
				node.left = insert(node.left, key);
			} else {

				return node;
			}

			/* 2. Update height of this ancestor node */
			node.height = 1 + max(height(node.left), height(node.right));

			/*
			 * 3. Get the balance factor of this ancestor node to check whether this node
			 * became unbalanced
			 */
			int balance = getBalance(node);

			// If this node becomes unbalanced, then
			// there are 4 cases Left Left Case
			if (balance > 1 && key.compareTo(node.left.key) < 0) {
				return rightRotate(node);
			}

			// Right Right Case
			if (balance < -1 && key.compareTo(node.right.key) > 0) {
				return leftRotate(node);
			}

			// Left Right Case
			if (balance > 1 && key.compareTo(node.left.key) > 0) {
				node.left = leftRotate(node.left);
				return rightRotate(node);
			}

			// Right Left Case
			if (balance < -1 && key.compareTo(node.right.key) < 0) {
				node.right = rightRotate(node.right);
				return leftRotate(node);
			}

			/* return the (unchanged) node pointer */
			return node;
		}

		Node insertLevel(Node node, String key, int level) {
			/* 1. Perform the normal BST rotation */
			if (node == null) {
				return (new Node(key));
			}
			if (node.height > level) {
				return node;
			}

			if (key.compareTo(node.key) > 0) {
				node.right = insert(node.right, key);
			} else if (key.compareTo(node.key) < 0) {
				node.left = insert(node.left, key);
			} else {

				return node;
			}

			/* 2. Update height of this ancestor node */
			node.height = 1 + max(height(node.left), height(node.right));

			/*
			 * 3. Get the balance factor of this ancestor node to check whether this node
			 * became unbalanced
			 */
			int balance = getBalance(node);

			// If this node becomes unbalanced, then
			// there are 4 cases Left Left Case
			if (balance > 1 && key.compareTo(node.left.key) < 0) {
				return rightRotate(node);
			}

			// Right Right Case
			if (balance < -1 && key.compareTo(node.right.key) > 0) {
				return leftRotate(node);
			}

			// Left Right Case
			if (balance > 1 && key.compareTo(node.left.key) > 0) {
				node.left = leftRotate(node.left);
				return rightRotate(node);
			}

			// Right Left Case
			if (balance < -1 && key.compareTo(node.right.key) < 0) {
				node.right = rightRotate(node.right);
				return leftRotate(node);
			}

			/* return the (unchanged) node pointer */
			return node;
		}

		/*
		 * Given a non-empty binary search tree, return the node with minimum key value
		 * found in that tree. Note that the entire tree does not need to be searched.
		 */
		Node minValueNode(Node node) {
			Node current = node;

			/* loop down to find the leftmost leaf */
			while (current.left != null) {
				current = current.left;
			}

			return current;
		}

		Node maxValueNode(Node node) {
			Node current = node;

			/* loop down to find the right most leaf */
			while (current.right != null) {
				current = current.right;
			}

			return current;
		}

		Node deleteNode(Node root, String key) {
			// STEP 1: PERFORM STANDARD BST DELETE
			if (root == null) {
				return root;
			}

			// If the key to be deleted is smaller than
			// the root's key, then it lies in left subtree
			if (key.compareTo(root.key) < 0) {
				root.left = deleteNode(root.left, key);
			} // If the key to be deleted is greater than the
				// root's key, then it lies in right subtree
			else if (key.compareTo(root.key) > 0) {
				root.right = deleteNode(root.right, key);
			} // if key is same as root's key, then this is the node
				// to be deleted
			else {

				// node with only one child or no child
				if ((root.left == null) || (root.right == null)) {
					Node temp = null;
					if (temp == root.left) {
						temp = root.right;
					} else {
						temp = root.left;
					}

					// No child case
					if (temp == null) {
						temp = root;
						root = null;
					} else // One child case
					{
						root = temp; // Copy the contents of
					} // the non-empty child
				} else {

					// node with two children: Get the inorder
					// successor (smallest in the right subtree)
					Node temp = minValueNode(root.right);

					// Copy the inorder successor's data to this node
					root.key = temp.key;

					// Delete the inorder successor
					root.right = deleteNode(root.right, temp.key);
				}
			}

			// If the tree had only one node then return
			if (root == null) {
				return root;
			}

			// STEP 2: UPDATE HEIGHT OF THE CURRENT NODE
			root.height = max(height(root.left), height(root.right)) + 1;

			// STEP 3: GET THE BALANCE FACTOR OF THIS NODE (to check whether
			// this node became unbalanced)
			int balance = getBalance(root);

			// If this node becomes unbalanced, then there are 4 cases
			// Left Left Case
			if (balance > 1 && getBalance(root.left) >= 0) {
				return rightRotate(root);
			}

			// Left Right Case
			if (balance > 1 && getBalance(root.left) < 0) {
				root.left = leftRotate(root.left);
				return rightRotate(root);
			}

			// Right Right Case
			if (balance < -1 && getBalance(root.right) <= 0) {
				return leftRotate(root);
			}

			// Right Left Case
			if (balance < -1 && getBalance(root.right) > 0) {
				root.right = rightRotate(root.right);
				return leftRotate(root);
			}

			return root;
		}

		Node deleteNodePre(Node root, String key) {
			// nama yg di delete diganti dengan predecessornya
			if (root == null) {
				return root;
			}

			// If the key to be deleted is smaller than
			// the root's key, then it lies in left subtree
			if (key.compareTo(root.key) < 0) {
				root.left = deleteNodePre(root.left, key);
			} // If the key to be deleted is greater than the
				// root's key, then it lies in right subtree
			else if (key.compareTo(root.key) > 0) {
				root.right = deleteNodePre(root.right, key);
			} // if key is same as root's key, then this is the node
				// to be deleted
			else {

				// node with only one child or no child
				if ((root.left == null) || (root.right == null)) {
					Node temp = null;
					if (temp == root.left) {
						temp = root.right;
					} else {
						temp = root.left;
					}

					// No child case
					if (temp == null) {
						temp = root;
						root = null;
					} else // One child case
					{
						root = temp; // Copy the contents of
					} // the non-empty child
				} else {

					// node with two children: Get the inorder
					// predecessor (smallest in the right subtree)
					Node temp = maxValueNode(root.left);

					// Copy the inorder predecessor's data to this node
					root.key = temp.key;

					// Delete the inorder predecessor
					root.left = deleteNode(root.left, temp.key);
				}
			}

			// If the tree had only one node then return
			if (root == null) {
				return root;
			}

			// STEP 2: UPDATE HEIGHT OF THE CURRENT NODE
			root.height = max(height(root.left), height(root.right)) + 1;

			// STEP 3: GET THE BALANCE FACTOR OF THIS NODE (to check whether
			// this node became unbalanced)
			int balance = getBalance(root);

			// If this node becomes unbalanced, then there are 4 cases
			// Left Left Case
			if (balance > 1 && getBalance(root.left) >= 0) {
				return rightRotate(root);
			}

			// Left Right Case
			if (balance > 1 && getBalance(root.left) < 0) {
				root.left = leftRotate(root.left);
				return rightRotate(root);
			}

			// Right Right Case
			if (balance < -1 && getBalance(root.right) <= 0) {
				return leftRotate(root);
			}

			// Right Left Case
			if (balance < -1 && getBalance(root.right) > 0) {
				root.right = rightRotate(root.right);
				return leftRotate(root);
			}

			return root;
		}

		// A utility function to print preorder traversal of
		// the tree. The function also prints height of every
		// node
		void preOrder(Node node) {
			if (node != null) {
				System.out.print(node.key + ";");
				preOrder(node.left);
				preOrder(node.right);
			}
		}

		void postOrder(Node node) {
			if (node != null) {
				// kiri teruuss sampai mentok
				postOrder(node.left);
				// cari kanan
				postOrder(node.right);
				// print
				System.out.print(node.key + ";");
			}
		}


		Node cariGantugan(Node node, String nama1, String nama2) {
			// referense
			// https://www.geeksforgeeks.org/lowest-common-ancestor-binary-tree-set-1/
			// base case
			if (node == null) {
				return null;
			}
			// jika di antara nama1 atau nama2 sama dengan root,
//		maka kembalikan root
			if (node.key.equals(nama1) || node.key.equals(nama2)) {
				return node;
			}

			// cari data di kiri dan kanan sub tree
			Node gantungankiri = cariGantugan(node.left, nama1, nama2);
			Node gantunganKanan = cariGantugan(node.right, nama1, nama2);

//jika kedua node di atas mengembalikan non-null, 
			// maka salah satu nama ada salah satu node,
			// satu lagi di node yg lain
			// jadi node itu adalah gantungan
			if (gantungankiri != null && gantunganKanan != null) {
				return node;
			}
			// else
			// cek apakan ada di left atau right yg menjadi gantungan
			return (gantungankiri != null) ? gantungankiri : gantunganKanan;
		}

		Node cariGantungan2(Node node, String nama1, String nama2) {
			if (node == null)
				return root;
			if (node.key.equals(nama1) || node.key.equals(nama2))
				return root;

			Node kiri = cariGantungan2(node.left, nama1, nama2);
			Node kanan = cariGantungan2(node.right, nama1, nama2);

			if (kiri != null && kanan != null)
				return root;
			if (kiri != null)
				return cariGantungan2(node.left, nama1, nama2);

			return cariGantungan2(node.right, nama1, nama2);
		}

		// return level dari nama jika ada dalam tree,
//	jika tidak return -1
		int cariLevel(Node node, String nama, int level) {

			// base case
			if (node == null) {
				return -1;
			}

			// jika nama ada di root, atau ada di kiri atau kanan root
			// return true
			if (node.key.equals(nama)) {
				return level;
			}
			int kiri = cariLevel(node.left, nama, level + 1);
			return (kiri != -1) ? kiri : cariLevel(node.right, nama, level + 1);
		}

		// fungsi mengembalikan jarak antara nama1 dan nama2
		// return -1 jika antara nama1 dan nama2 tidak ada di tree

		int cariJarak(Node node, String nama1, String nama2) {
			Node gantungan = cariGantungan2(node, nama1, nama2);

			int jarak1 = cariLevel(gantungan, nama1, 0);
			int jarak2 = cariLevel(gantungan, nama2, 0);

			return jarak1 + jarak2;
		}
		
		Node inorderSuccessor(Node node, String p) {
//			https://www.programcreek.com/2014/05/leetcode-inorder-successor-in-bst-java/
		    if(node==null)
		        return null;
		 
		    Node next = null;
		    Node c = node;
		    while(c!=null && c.key.equals(p)==false){
		        if(c.key.compareTo(p) > 0){
		            next = c;
		            c = c.left;
		        }else{
		            c= c.right;
		        }
		    }
		 
		    if(c==null)        
		        return null;
		 
		    if(c.right==null)
		        return next;
		 
		    c = c.right;
		    while(c.left!=null)
		        c = c.left;
		 
		    return c;
		}

		public Node predecessorInorder(Node node, Node pre, String nama) {
			//base case
			//https://www.techiedelight.com/find-inorder-predecessor-given-key-bst/
			if(node == null) {
				return pre;
			}
			//jika nama ketemu, predesesor adalah nilai max di
			// kiri subtree
			if(node.key.equals(nama)) {
				if(node.left != null) {
					return maxValueNode(node.left);
				}
			}
			//jika nama kecil dari root, recursive subtree kiri
			//
			else if(nama.compareTo(node.key)<0) {
				return predecessorInorder(node.left, pre, nama);
			}
			//jika key lebih besar dari root, recursive ke kanan
			else {
				//update predesessor sebelum recursive di subtree
				//kanan
				pre = node;
				return predecessorInorder(node.right, pre, nama);
			}
			return pre;
		}
		
		public String cariPartner2(Node node, String nama) {
			Node current = node;
			Node parrent = node; // node menyimpan parent
			while (current != null) {
				if (current.key.compareTo(nama) == 0) {
					if (parrent.right != null && parrent.right.key.equals(nama) && parrent.left != null) {
						return parrent.left.key;
					} else if (parrent.left != null && parrent.left.key.equals(nama) && parrent.right != null) {
						return parrent.right.key;
					} else if (parrent.right == null || parrent.left == null) {
						return "TIDAK ADA";
					}
				} else if (current.key.compareTo(nama) > 0) { // nama lebih kecil
					parrent = current;// update parent
					current = current.left; // cari di kiri
				} else {// nama lebih besar cari di kanan
					parrent = current;
					current = current.right;
				}
			}
			return "TIDAK ADA";
		}

		public void musibah(Node node, int level) {
			if (node == null) {
				return;
			}
			if (level == 1) {
				System.out.print(node.key + ";");
				deleteNode(root, node.key);
			} else if (level > 1) {
				musibah(node.left, level - 1);
				musibah(node.right, level - 1);
			}

		}

		public static void main(String[] args) throws IOException {
			SDA1819T3 tree = new SDA1819T3();
			sc = new Scanner(System.in);
			int k = 0;
			String x = "";
			int q = Integer.parseInt(sc.nextLine());
			for (int i = 0; i < q; i++) {
				String line = sc.nextLine();
				String[] tokens = line.split("\\s");
				String perintah = tokens[0];
				switch (perintah) {
				case "GABUNG":
					if (tokens.length == 2) {
						x = tokens[1];
						tree.root = tree.insert(tree.root, x);
					} else {
						x = tokens[1];
						k = Integer.parseInt(tokens[2]);
						int jumlahS = 0; 
						if (x.compareTo(tree.root.key) > 0) {
							//cari jumlah succesor
							Node succesor = tree.root;
							while(succesor!=null) {
								succesor = tree.inorderSuccessor(tree.root, succesor.key);
								jumlahS++;
							}
						}else {//cari jumlah predecessor
							Node succesor = tree.root;
							while(succesor!=null) {
								succesor = tree.predecessorInorder(tree.root, null, succesor.key);
								jumlahS++;
							}
						}
						if (k>jumlahS) {
							//anggota baru bisa melihat lebih jauh dari jumlah predesesor/sucsessor
							
							tree.root = tree.insert(tree.root, x);
						}
					}
					break;
				case "PARTNER":
					x = tokens[1];
					System.out.println(tree.cariPartner2(tree.root, x));
					break;
				case "MENYERAH":
					x = tokens[1];
					tree.root = tree.deleteNodePre(tree.root, x);
					break;
				case "CEDERA":
					x = tokens[1];
					tree.root = tree.deleteNode(tree.root, x);
					break;
				case "PRINT":
					tree.preOrder(tree.root);
					System.out.println("");
					tree.postOrder(tree.root);
					break;
				case "MUSIBAH":
					// https://www.geeksforgeeks.org/find-deepest-node-binary-tree/
					int level = tree.root.height;
					tree.musibah(tree.root, level);
					break;
				case "PANJANG-TALI":
					System.out.println(tree.cariJarak(tree.root, tokens[1], tokens[2]));
					// https://www.geeksforgeeks.org/find-distance-between-two-nodes-of-a-binary-tree/
					break;
				case "GANTUNGAN":
					k = Integer.parseInt(tokens[1]);
					String nama1 = "ZZZZZZ";// paling kiri
					String nama2 = "A";// paling kanan

					for (int j = 1; j <= k; j++) {
						// jika ada nama yg jadi root
						if (tokens[j + 1].equals(tree.root.key)) {
							// langsung jadi gantunan paling tinggi
							System.out.println(tokens[j + 1]);
						}
						if (tokens[j + 1].compareTo(tree.root.key) < 0) {
							// operasi di ruas kiri
							if (tokens[j + 1].compareTo(nama1) < 0) {
								// jika nama baru lebih kecil maka dia paling kiri
								nama1 = tokens[j + 1];
							}
							if (tokens[j + 1].compareTo(nama2) > 0) {
								// jika nama baru lebih besar maka dia paling kanan
								nama2 = tokens[j + 1];
							}

						} else {// operasi di ruas kanan
							if (tokens[j + 1].compareTo(nama1) < 0) {
								nama1 = tokens[j + 1];
							}
							if (tokens[j + 1].compareTo(nama2) > 0) {
								nama2 = tokens[j + 1];
							}
						}
					}
					Node temp = tree.cariGantugan(tree.root, nama1, nama2);
					System.out.println(temp.key);
					break;
				default:
					System.out.println("Input Salah");
					break;
				}
			}
		}

	}

