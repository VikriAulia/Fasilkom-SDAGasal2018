
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 * 
 */

/**
 * @author vikri.aulia
 * @author NPM 1706124182
 */

//node untuk rantai hash 
//hashtable ini menggunakan teknik open hasing dengan menggunakan arraylist untuk menampung data
//referensi code https://www.geeksforgeeks.org/implementing-our-own-hash-table-with-separate-chaining-in-java/
class HashNode<K, V> {

	K key;
	V pola;
	int kemunculan;

	// Referensi ke node berikutnya
	HashNode<K, V> next;

	// Constructor
	public HashNode(K key, V pola, int kemunculan) {
		this.key = key;
		this.pola = pola;
		this.kemunculan = kemunculan;
	}
}

public class SDA1819T4<K, V> {

	static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
	public final static int d = 256;
	static int Basis = 31;
	static String S;
	static int Q;

	/**
	 * @param args
	 */
	// tampungArray di gunakan untuk menyimpan array rantai data
	private ArrayList<HashNode<K, V>> bucketArray;

	// kapasitas arraylist saat ini
	private int numBuckets;

	// ukuran dari array list
	private int size;

	// Constructo ( inisialisasi kapasitas, ukuran dan
	// rantai yg kosong
	public SDA1819T4() {
		bucketArray = new ArrayList<>();
		numBuckets = 10;
		size = 0;

		// membuat rantai data kosong
		for (int i = 0; i < numBuckets; i++)
			bucketArray.add(null);
	}

	public int size() {
		return size;
	}

	public boolean isEmpty() {
		return size() == 0;
	}

	// fungsi hash referensi buku Weis, Mark A. Data Structure
	public int hash(String key, int tableSize) {
		int hashVal = 0;
		for (int i = 0; i < key.length(); i++)
			hashVal = 37 * hashVal + key.charAt(i);
		hashVal %= tableSize;
		if (hashVal < 0)
			hashVal += tableSize;
		return hashVal;
	}

	static int hashPola(String pola) {
		int hasilHash = 0, panjangPola = pola.length(), q = 101;
		for (int i = 0; i < panjangPola; i++) {
			// perkalian dengan Basis untuk setiap char Rumus: Pola[i..i+panjangPola-1]
			hasilHash += (d * hasilHash + pola.charAt(i)) % q;
//		hasilHash += 37 * pola.charAt(i)*(Math.pow(Basis, panjangPola-1));
		}
		return hasilHash;
	}

	private int getBucketIndex(K key) {

		String pola = key.toString();
		int index = hash(pola, numBuckets);
		return index;
	}

	// method untuk mengembalikan isi dari sebuah key
	// yg berupa substring dari kalimat
	public V get(K key) {

		// cari head dari key
		int bucketIndex = getBucketIndex(key);
		HashNode<K, V> head = bucketArray.get(bucketIndex);

		// cari key dalam chain data
		while (head != null) {
			if (head.key.equals(key))
//				return head.pola;
				System.out.println(head.pola + " " + head.kemunculan);
			head = head.next;
		}

		// jika tidak ketemu
		return null;
	}

	// fungsi add data kedalam hashtable, kombinasi pasangan key dengan value
	public boolean add(K key, V value, int C) {

		int bucketIndex = getBucketIndex(key);
		HashNode<K, V> head = bucketArray.get(bucketIndex);

		// Cek apakah key sudah ada
		while (head != null) {
			if (head.key.equals(key)) {// jika sama
				// cek jumlah kemunculan dari substring yang baru
				if (head.kemunculan < C) {// jika kemunculan yang baru lebih tinggi maka ganti posisi
					head.pola = value;
					head.kemunculan = C;
					return true;
				}

				return false;
			}
			head = head.next;
		}

		// jika belum ada, masukkan data ke hashtable
		size++;
		head = bucketArray.get(bucketIndex);
		HashNode<K, V> newNode = new HashNode<K, V>(key, value, C);
		newNode.next = head;
		bucketArray.set(bucketIndex, newNode);

		// jika load factor melebihi treshold, maka ukuran hastable di double
		if ((1.0 * size) / numBuckets >= 0.7) {
			ArrayList<HashNode<K, V>> temp = bucketArray;
			bucketArray = new ArrayList<>();
			numBuckets = 2 * numBuckets;
			size = 0;
			for (int i = 0; i < numBuckets; i++)
				bucketArray.add(null);

			for (HashNode<K, V> headNode : temp) {
				while (headNode != null) {
					add(headNode.key, headNode.pola, C);
					headNode = headNode.next;
				}
			}
		}
		return true;
	}

	int cariKemunculan(String pola, String kalimat) {
		// Referensi
		// https://www.javacodeexamples.com/java-count-occurrences-of-substring-in-string-example/724
//		int hasil = 0 ,index =0;

//		while ((index = kalimat.indexOf(pola, index)) != -1) {
//			// menggunakan method indexOf untuk mencari ada tidaknya 
//			//substring/pola dalam sebuah kalimat, method ini akan 
//			// mengembalikan nilai -1 jika pola tidak ditemukan
//			hasil++; //jika pola ketemu hasil di tambah
//			index++; //geser index awal pencocokan
//		}
		int hasil = (kalimat.split(pola, -1).length) - 1;

		return hasil;
	}

	int cari(String pola) {
		int N = pola.length();
		int hasil = 0;
		int hash = hashPola(pola);

		for (int i = N; i < S.length(); i++) {
			int hashCek = hashPola(S.substring(i - N, i));
			if (hash == hashCek) {
				hasil++;
			}
		}
		return hasil;
	}

	int search(String pat, String txt) // Rabin-kaph Algoritma
										// https://www.geeksforgeeks.org/rabin-karp-algorithm-for-pattern-searching/
	{
		int M = pat.length();
		int N = txt.length();
		int i, j;
		int p = 0; // hash value for pattern
		int t = 0; // hash value for txt
		int h = 1;
		int hasil = 0;
		int q = 101;

		// The value of h would be "pow(d, M-1)%q"
		for (i = 0; i < M - 1; i++)
			h = (h * d) % q;

		// Calculate the hash value of pattern and first
		// window of text
		for (i = 0; i < M; i++) {
			p = (d * p + pat.charAt(i)) % q;
			t = (d * t + txt.charAt(i)) % q;
		}

		// Slide the pattern over text one by one
		for (i = 0; i <= N - M; i++) {

			// Check the hash values of current window of text
			// and pattern. If the hash values match then only
			// check for characters on by one
			if (p == t) {
				/* Check for characters one by one */
				for (j = 0; j < M; j++) {
					if (txt.charAt(i + j) != pat.charAt(j))
						break;
				}

				// if p == t and pat[0...M-1] = txt[i, i+1, ...i+M-1]
				if (j == M)
					hasil++;
//                    System.out.println("Pattern found at index " + i);

			}

			// Calculate hash value for next window of text: Remove
			// leading digit, add trailing digit
			if (i < N - M) {
				t = (d * (t - txt.charAt(i) * h) + txt.charAt(i + M)) % q;

				// We might get negative value of t, converting it
				// to positive
				if (t < 0)
					t = (t + q);
			}
		}
		return hasil;
	}

	public static void main(String[] args) throws IOException {
		SDA1819T4<Integer, String> TP4 = new SDA1819T4<>();
//		long startTime = 0;
		S = reader.readLine(); // mengambil String
		Q = Integer.parseInt(reader.readLine()); // ambil jumlah inputan
//		startTime = System.currentTimeMillis();
		for (int i = 0; i < Q; i++) {

			String[] tokens = reader.readLine().split(" ");
			int tipe = Integer.parseInt(tokens[0]);

			if (tipe == 0) {// action type 0
				String pola = tokens[1];
//				int hasil = TP4.cariKemunculan(pola, S);
				int hasil = TP4.search(pola, S); // lebih kecil
//				int hasil = TP4.cari(pola);
				System.out.println(hasil);

			} else if (tipe == 1) { // action tipe 1

				String kalimat = S;
				int n = S.length();// panjang dari string
				for (int k = 0; k < n; k++) {
					for (int j = k + 1; j <= n; j++) {
						String substring = kalimat.substring(k, j); // berisi substring dengan index awal i dan akhir j
						// menggunakan java substring method
						int key = substring.length(); // panjang dari substring jadi key

						int M = kalimat.length();
						int N = substring.length();
						int l, m;
						int p = 0; // hash value for pattern
						int t = 0; // hash value for txt
						int h = 1;
						int q = 101;

						// The value of h would be "pow(d, M-1)%q"
						for (l = 0; l < M - 1; l++)
							h = (h * d) % q;

						// hitung nilai hash dari pola dan window pertama dari teks
						for (l = 0; l < M; l++) {
							p = (d * p + substring.charAt(i)) % q;
							t = (d * t + kalimat.charAt(i)) % q;
						}

						// geser patern sepanjang teks perkarakter
						for (l = 0; l <= N - M; l++) {

							// Calculate hash value for next window of text: Remove
							// leading digit, add trailing digit
							if (l < N - M) {
								t = (d * (t - kalimat.charAt(i) * h) + kalimat.charAt(i + M)) % q;

								// We might get negative value of t, converting it
								// to positive
								if (t < 0)
									t = (t + q);
							}
						}

						TP4.add(key, substring, kemunculan); // isi data ke hashtable

					}
				}
				// print isi chain hashtable
				int l = 1; // ini dalah key
				int size = TP4.size(); // ini ukuran hashtable
				while (l <= size) {
					TP4.get(l); // method berisi perintah print
					l++; // tambah key
				}
			}

		}
//		long endTime = System.currentTimeMillis();
//		System.out.println("It took " + (endTime - startTime) + " milliseconds");
	}

}
